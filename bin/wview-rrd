#!/usr/bin/perl

# wview-rrd: weewx/wview -> RRD data storage backend by twitham@sbcglobal.net
# see cgi-bin/weather for the CGI graphing frontend, 2013/01

use strict;
use DBI;
use RRDs;

my $totalrain = 0;    # must match YTD starting rain in first run only
if (@ARGV) {
    $ARGV[0] =~ /^\d+(\.\d+)?$/
	? $totalrain = $ARGV[0]
	: die "usage: $0 [N.NN] # starting rain in inches YTD\n";
}
umask 022;			# ensure readable RRD files
my $tty = -t STDIN;		# clues when interactive

# the first SQLite database found will be used, RRDs created/updated there
my $dbfile = 0;
for my $path (qw(. /var/lib/weewx /home/weewx/archive
	      /Users/Shared/weewx/archive /var/lib/wview/archive)) {
    for my $file (qw(weewx.sdb wview-archive.sdb)) {
	if (-s "$path/$file") {
	    warn "using $path/$file\n" if $tty;
	    chdir $path or die "$0: can't cd $path: $!\n";
	    $dbfile = $file;
	    last;
	}
    }
    $dbfile and last;
}
$dbfile ||= 'weewx.sdb';	# default database in cwd
my $dbtable = 'archive';	# table to use
my $rrdfile = 'wview.rrd';	# primary data metrics from station
my $rainfile = 'rain.rrd';	# added to track total rain
my $windfile = 'wind.rrd';     # added to track average wind direction
my @common = (step	=> 5 * 60, # common shared RRD options
	      heartbeat	=> 11 * 60,
	      xff	=> 0.5,
	      start	=> (scalar(time) - 10 * 365 * 24 * 60 * 60));
my @rra	= (join(':', 5 * 60 =>	# 5 minute archives: 3 months
		93 * 24 * 60 * 60),
	   join(':', 60 * 60 =>	# hourly archives: 5 years
		5 * 366 * 24 * 60 * 60),
	   join(':', 24 * 60 * 60 => # daily archives: 50 years
		50 * 366 * 24 * 60 * 60),
    );

my $wviewrrd = {
    @common,
    ds => { 			# creation defaults
	barometer	=> "GAUGE:14:33",
	pressure	=> "GAUGE:14:33",
	altimeter	=> "GAUGE:14:33",
	inTemp		=> "GAUGE:-50:200",
	outTemp		=> "GAUGE:-50:200",
	inHumidity	=> "GAUGE:0:100",
	outHumidity	=> "GAUGE:0:100",
	windSpeed	=> "GAUGE:0:200",
	windDir		=> "GAUGE:0:360",
	windGust	=> "GAUGE:0:200",
	windGustDir	=> "GAUGE:0:360",
	rainRate	=> "GAUGE:0:100",
	rain		=> "GAUGE:0:100",
	dewpoint	=> "GAUGE:-100:200",
	windchill	=> "GAUGE:-100:200",
	heatindex	=> "GAUGE:-50:250",
	UV		=> "GAUGE:0:36",
	extraTemp1	=> "GAUGE:-50:200",
	extraTemp2	=> "GAUGE:-50:200",
	extraHumid1	=> "GAUGE:0:100",
	extraHumid2	=> "GAUGE:0:100",
    },
    rra => [ "$rra[0]:AVERAGE:MIN:MAX:LAST",
	     "$rra[1]:AVERAGE:MIN:MAX:LAST",
	     "$rra[2]:AVERAGE:MIN:MAX:LAST",
	],
};

my $rainrrd = $wviewrrd; # rain is identical
my $windrrd = {
    @common,
    ds => { default => 'ABSOLUTE:0:100' },
    rra => [ "$rra[0]:AVERAGE",
	     "$rra[1]:AVERAGE",
	     "$rra[2]:AVERAGE",
	],
};

# fields to store, in order
my @FIELD = qw(
barometer
pressure
altimeter
inTemp
outTemp
inHumidity
outHumidity
windSpeed
windDir
windGust
windGustDir
rainRate
rain
dewpoint
windchill
heatindex
UV
extraTemp1
extraTemp2
extraHumid1
extraHumid2
);
# TODO: let UV and later be optional/configurable

my $FIELD = join ':', @FIELD;

my $last = 1;			# last update time
my $lastyear = -1;		# reset rain each year
if (-s $rrdfile) {		# get last update timestamp
    $last = RRDs::last($rrdfile);
    my $err = RRDs::error;
    die "ERROR while reading LAST of $rrdfile: $err\n" if $err;
    $lastyear = (localtime $last)[5];
}
if (-s $rainfile) {		# get total rain so far
    my $tmp = RRDs::info($rainfile);
    my $err = RRDs::error;
    die "ERROR while reading LAST of $rainfile: $err\n" if $err;
    $tmp = $tmp->{'ds[totalRain].last_ds'};
    defined $tmp or die "LAST not found in $rainfile\n";
    $totalrain = $tmp || 0;
    # print "$totalrain\n";
    # exit;
}
&catchup($last);
exit;				# all done

# gather and store all archive records since last update
sub catchup {
    my($last) = @_;
    my $dbh = DBI->connect(
	"dbi:SQLite:dbname=$dbfile",
	"",
	"",
	{ RaiseError => 1, ReadOnly => 1 },
	) or die $DBI::errstr;

    my $sth = $dbh->prepare(
	"select * from $dbtable where dateTime > ? order by dateTime ASC");
    $sth->execute($last);

    my $row;
    while($row = $sth->fetchrow_hashref()) {
#    print Dumper \$row;
	&rrdupdate($rrdfile, $FIELD,
		   (join ':', $row->{dateTime},
		    map { &rrdvalue($row->{$_}) } @FIELD),

		   $wviewrrd);

	my $year = (localtime $row->{dateTime})[5];
	if ($year != $lastyear) {
	    $totalrain = 0 if $lastyear > -1;
	    $lastyear = $year;
	}
	$totalrain += $row->{rain} || 0;
	&rrdupdate($rainfile, 'totalRain',
		   (join ':', $row->{dateTime}, $totalrain),
		   $rainrrd);

	&wind($row->{dateTime},
	      &rrdvalue($row->{windDir}),
	      &rrdvalue($row->{windGustDir}));
    }

    $sth->finish();
    $dbh->disconnect();
}

sub rrdvalue {
    my($var) = @_;
    return defined($var) ? $var : 'U';
}

# count wind direction occurrences into 8 compass buckets
sub wind {
    my($time, $adir, $gdir) = @_;
    my @adir = qw(an ane ae ase as asw aw anw an);
    my @gdir = qw(gn gne ge gse gs gsw gw gnw gn);
    my %dir;
    $dir{$adir[($adir + 22.5) / 45]} = 1
	unless $adir eq 'U';
    pop @adir;
    $dir{$gdir[($gdir + 22.5) / 45]} = 1
	unless $gdir eq 'U';
    pop @gdir;
    &rrdupdate($windfile,
    	       (join ':', @adir, @gdir),
    	       (join ':', $time, map { $dir{$_} || 0 } @adir, @gdir),
    	       $windrrd);
}

# update an RRD file, creating it if needed
sub rrdupdate {
    my($file, $template, $data, $rrd) = @_;

    unless (-s $file) {
	my @path = split '/', $file;
	my $parent = '.';
	for (@path) {
	    next if /.rrd$/;
	    $parent .= "/$_";
	    next if -d $parent;
	    mkdir $parent or warn "can't mkdir $parent: $!\n";
	}
	my $step = $rrd->{step} || 60;
	my $heartbeat = $rrd->{heartbeat} || $step * 3;
	my $start = $rrd->{start} || (scalar(time) - 366 * 24 * 60 * 60);
	my @rrd = ($file,
		   '--start' => $start,
		   '--step'  => $step);
	for my $ds (split ':', $template) {
	    my $text = 'GAUGE:0:U';
	    defined $rrd->{ds} and defined $rrd->{ds}{default} and
		$text = $rrd->{ds}{default};
	    defined $rrd->{ds} and defined $rrd->{ds}{$ds} and
		$text = $rrd->{ds}{$ds};
	    my($type, $min, $max) = split ':', $text;
	    defined $min or $min = 0;
	    defined $max or $max = 'U';
	    push @rrd, "DS:$ds:$type:$heartbeat:$min:$max";
	}
	for my $p (@{$rrd->{rra}}) {
	    my($per, $total, @cf) = split ':', $p;
	    my $steps = $per / $step;
	    my $rows = $total / $per;
	    my $xff = $rrd->{xff} || 0.5;
	    for my $cf (@cf) {
		push @rrd, "RRA:$cf:$xff:$steps:$rows";
	    }
	}
	RRDs::create(@rrd);
	my $err = RRDs::error;
	die "ERROR while creating $file: $err\n" if $err;
    }
    print "$file: $data\n" if $tty;
    RRDs::update($file, '--template' => $template, $data);
    my $err = RRDs::error;
    warn "ERROR while updating $file: $err\n" if $err;
}
